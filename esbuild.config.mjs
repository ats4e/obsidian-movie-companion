import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { version, name, homepage } from './read-package-json.mjs';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const buildOptions = {
    banner: {
        js: banner,
    },
    minify: prod ? true : false,
    entryPoints: ["src/Main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/closebrackets",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/comment",
        "@codemirror/fold",
        "@codemirror/gutter",
        "@codemirror/highlight",
        "@codemirror/history",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/matchbrackets",
        "@codemirror/panel",
        "@codemirror/rangeset",
        "@codemirror/rectangular-selection",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/stream-parser",
        "@codemirror/text",
        "@codemirror/tooltip",
        "@codemirror/view",
        ...builtins,
    ],
    format: "cjs",
    target: "es2016",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    define: {
        'process.env.VERSION': JSON.stringify(version),
        'process.env.NAME': JSON.stringify(name),
        'process.env.HOMEPAGE': JSON.stringify(homepage),
    },
};

if (!prod) {
    esbuild
        .context(buildOptions)
        .then(ctx => ctx.watch())
        .catch(() => process.exit(1));
} else {
    esbuild
        .build(buildOptions)
        .catch(() => process.exit(1));
}
